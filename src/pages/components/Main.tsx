import react, { useState, useEffect, useRef, ChangeEvent } from "react";
import Head from "next/head";
import Image from "next/image";
import moment from "moment";
import {
  Card,
  CardBody,
  Stack,
  StackDivider,
  Box,
  Text,
  Button,
  Menu,
  MenuButton,
  MenuList,
  MenuItem,
  Input,
  HStack,
  VStack,
  IconButton,
} from "@chakra-ui/react";
import { BsThreeDots, BsHeart, BsHeartFill } from "react-icons/bs";
import { FaRegComment, FaComment } from "react-icons/fa";
import { FiSend } from "react-icons/fi";
import { LiaShareSolid } from "react-icons/lia";
import { BsSendFill } from "react-icons/bs";
import { AiOutlineDelete } from "react-icons/ai";

export default function Main() {
  const [postDescription, setpostDescription] = useState("");
  const [postImage, setpostImage] = useState("");
  const [postComment, setpostComment] = useState("");
  const [commentbarList, setcommentbarList] = useState<number[]>([]);
  const [commentLikeList, setcommentLikeList] = useState<number[]>([]);
  const [likeList, setlikeList] = useState<number[]>([]);
  const [validpost, setvalidpost] = useState(false);
  const [update, setupdate] = useState(false);
  const [elements, setElements] = useState([]);
  const [commentsSectionList, setcommentsSectionList] = useState<any[]>([]);
  const fileInputRef = useRef<HTMLInputElement>(null);

  const HashtagHighlighter = ({ text }: { text: string }) => {
    const hashtagRegex = /#\w+/g;

    // Use a regular expression to split the text while preserving spaces
    const wordsWithSpaces = text.split(/(\s+)/);

    const processedText = wordsWithSpaces.map((word, index) => {
      if (hashtagRegex.test(word)) {
        return (
          <span key={index} style={{ color: "blue", fontSize: "18px" }}>
            {word}
          </span>
        );
      } else {
        return (
          <span key={index} style={{ fontSize: "18px" }}>
            {word}
          </span>
        );
      }
    });

    return <>{processedText}</>;
  };

  const handleImageChange = (event: ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];

    if (file) {
      const reader = new FileReader();
      reader.onloadend = () => {
        setpostImage(reader.result as string);
      };
      reader.readAsDataURL(file);
    }
  };

  const handleButtonClick = () => {
    fileInputRef.current?.click();
  };
  interface Element {
    id: number;
    description: string;
    image: string;
    comments: string[];
    postedTime: number;
  }
  interface data {
    postedTime: string;
  }
  const handleCreateElement = (
    postDescription: string,
    postImage: string,
    setElements: React.Dispatch<React.SetStateAction<any>>,
    setpostDescription: React.Dispatch<React.SetStateAction<string>>,
    setpostImage: React.Dispatch<React.SetStateAction<string>>
  ): void => {
    const newElement: Element = {
      id: Date.now(),
      description: postDescription,
      image: postImage,
      comments: [],
      postedTime: Date.now(),
    };

    setElements((prevElements: any) => [...prevElements, newElement]);
    setpostDescription("");
    setpostImage("");
  };
  // Inside ImageUploader.tsx

  // Rest of the component remains the same

  useEffect(() => {
    console.log(elements);
  }, [elements]);
  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="main-div">
        <Card>
          <CardBody>
            <Stack divider={<StackDivider />} spacing="4">
              <Box display={"flex"} alignItems={"center"}>
                <Image
                  alt="profile"
                  width="50"
                  height="50"
                  unoptimized
                  src={"/assets/profile.png"}
                />
                <Input
                  value={postDescription}
                  onChange={(e) => {
                    setpostDescription(e.target.value);
                  }}
                  m={3}
                  isInvalid={validpost}
                  errorBorderColor="red.300"
                  borderRadius={20}
                  placeholder="Share Something"
                />
                <Button
                  onClick={() => {
                    if (postDescription || postImage !== "") {
                      setvalidpost(false);
                      handleCreateElement(
                        postDescription,
                        postImage,
                        setElements,
                        setpostDescription,
                        setpostImage
                      );
                    } else {
                      setvalidpost(true);
                    }
                  }}
                >
                  Post
                </Button>
              </Box>
              {postImage !== "" ? (
                <Box
                  display={"flex"}
                  alignItems={"center"}
                  justifyContent={"space-between"}
                >
                  <Image
                    alt="postImage"
                    width="70"
                    height="70"
                    unoptimized
                    src={postImage}
                  />
                  <IconButton
                    onClick={() => setpostImage("")}
                    variant="ghost"
                    colorScheme="gray"
                    aria-label="See menu"
                    icon={<AiOutlineDelete size="22" />}
                  />
                </Box>
              ) : null}
              <Box display={"flex"}>
                <HStack
                  onClick={handleButtonClick}
                  cursor={"pointer"}
                  spacing="9px"
                >
                  <Image
                    alt="photo"
                    width="25"
                    height="20"
                    unoptimized
                    src={"/assets/photo.png"}
                  />
                  <Text>Image</Text>
                  <input
                    type="file"
                    onChange={handleImageChange}
                    style={{ display: "none" }}
                    ref={fileInputRef}
                  />
                </HStack>
                <HStack
                  onClick={(e) => {
                    setpostDescription((prevText) => `${prevText} #`);
                  }}
                  cursor={"pointer"}
                  marginLeft={5}
                  spacing="9px"
                >
                  <Image
                    alt="hashtag"
                    width="20"
                    height="20"
                    unoptimized
                    src={"/assets/hashtag.png"}
                  />
                  <Text>Hashtag</Text>
                </HStack>
                <HStack
                  onClick={(e) => {
                    setpostDescription((prevText) => `${prevText} @`);
                  }}
                  cursor={"pointer"}
                  marginLeft={5}
                  spacing="9px"
                >
                  <Image
                    alt="mention"
                    width="20"
                    height="20"
                    unoptimized
                    src={"/assets/mention.png"}
                  />
                  <Text>Mention</Text>
                </HStack>
              </Box>
            </Stack>
          </CardBody>
        </Card>
        {elements.length > 0 ? (
          (elements as any[]).map((data, index) => (
            <Card key={index} marginTop={10}>
              <CardBody>
                <Stack divider={<StackDivider />} spacing="4">
                  <Box
                    justifyContent={"space-between"}
                    display={"flex"}
                    alignItems={"center"}
                  >
                    <Stack display={"flex"} flexDir={"row"}>
                      <Image
                        alt="profile"
                        width="50"
                        height="50"
                        unoptimized
                        src={"/assets/profile.png"}
                      />
                      <VStack alignItems={"start"} spacing={1} marginLeft={5}>
                        <Text fontWeight={700} fontSize={16}>
                          John Doe
                        </Text>
                        <Text fontSize={12}>
                          {moment(data.postedTime).fromNow()}
                        </Text>
                      </VStack>
                    </Stack>
                    <Menu>
                      <MenuButton
                        as={IconButton}
                        aria-label="Options"
                        icon={<BsThreeDots />}
                        variant="outline"
                      />
                      <MenuList>
                        <MenuItem
                          onClick={() => {
                            setElements((prevElements: any) =>
                              prevElements.filter(
                                (element: any) => data.id !== element.id
                              )
                            );
                          }}
                        >
                          Delete
                        </MenuItem>
                      </MenuList>
                    </Menu>
                  </Box>
                  <Box>
                    <HashtagHighlighter text={data.description} />
                    {data.image?.length > 0 ? (
                      <Stack marginTop={10} alignItems={"center"}>
                        <Image
                          alt="post-iamge"
                          className="post-image"
                          width="500"
                          height="500"
                          unoptimized
                          src={data.image}
                        />
                      </Stack>
                    ) : null}
                    <Stack
                      marginTop={15}
                      flexDirection={"row"}
                      justifyContent={"space-between"}
                    >
                      <Stack flexDirection={"row"}>
                        <HStack spacing={0}>
                          {likeList.includes(data.id) ? (
                            <IconButton
                              onClick={() => {
                                setlikeList((prevElements) =>
                                  prevElements.filter(
                                    (element) => data.id !== element
                                  )
                                );
                              }}
                              variant="ghost"
                              colorScheme="gray"
                              aria-label="See menu"
                              icon={<BsHeartFill color="red" />}
                            />
                          ) : (
                            <IconButton
                              onClick={() => {
                                setlikeList((prevElements) => [
                                  ...prevElements,
                                  data.id,
                                ]);
                              }}
                              variant="ghost"
                              colorScheme="gray"
                              aria-label="See menu"
                              icon={<BsHeart />}
                            />
                          )}
                        </HStack>
                        <HStack spacing={0}>
                          {commentsSectionList.includes(data.id) ? (
                            <IconButton
                              onClick={() => {
                                setcommentsSectionList((prevElements) =>
                                  prevElements.filter(
                                    (element) => data.id !== element
                                  )
                                );
                              }}
                              variant="ghost"
                              colorScheme="gray"
                              aria-label="See menu"
                              icon={<FaComment />}
                            />
                          ) : (
                            <IconButton
                              onClick={() => {
                                setcommentsSectionList((prevElements) => [
                                  ...prevElements,
                                  data.id,
                                ]);
                              }}
                              variant="ghost"
                              colorScheme="gray"
                              aria-label="See menu"
                              icon={<FaRegComment />}
                            />
                          )}
                          <Text>{data.comments?.length}</Text>
                        </HStack>
                        <HStack spacing={0}>
                          <IconButton
                            variant="ghost"
                            colorScheme="gray"
                            aria-label="See menu"
                            icon={<LiaShareSolid size={22} />}
                          />
                        </HStack>
                      </Stack>
                      {commentbarList.includes(data.id) ? (
                        <IconButton
                          onClick={() => {
                            setcommentbarList((prevElements) =>
                              prevElements.filter(
                                (element) => data.id !== element
                              )
                            );
                          }}
                          variant="ghost"
                          colorScheme="gray"
                          aria-label="See menu"
                          icon={<BsSendFill size={22} />}
                        />
                      ) : (
                        <IconButton
                          onClick={() => {
                            setcommentbarList((prevElements) => [
                              ...prevElements,
                              data.id,
                            ]);
                          }}
                          variant="ghost"
                          colorScheme="gray"
                          aria-label="See menu"
                          icon={<FiSend size={22} />}
                        />
                      )}
                    </Stack>
                  </Box>
                  {commentbarList.includes(data.id) ? (
                    <Box display={"flex"} alignItems={"center"}>
                      <Input
                        value={postComment}
                        onChange={(e) => {
                          setpostComment(e.target.value);
                        }}
                        m={3}
                        borderRadius={20}
                        placeholder="Type Comment"
                      />
                      <Button
                        onClick={() => {
                          const existingArray = data.comments;
                          existingArray.push({
                            id: Date.now(),
                            message: postComment,
                          });
                          setcommentsSectionList((prevElements) => [
                            ...prevElements,
                            data.id,
                          ]);
                          setpostComment("");
                          setupdate(!update);
                        }}
                      >
                        Send
                      </Button>
                    </Box>
                  ) : null}
                </Stack>
                <Box>
                  {data.comments?.length > 0 &&
                  commentsSectionList.includes(data.id) ? (
                    <Text marginTop={10} fontSize={18} fontWeight={700}>
                      Comments
                    </Text>
                  ) : null}
                  {data.comments?.length > 0 &&
                  commentsSectionList.includes(data.id)
                    ? data.comments?.map((d: any, i: number) => (
                        <Box key={i} marginTop={5}>
                          {i > 0 ? <hr /> : null}
                          <Stack
                            marginTop={5}
                            divider={<StackDivider />}
                            display={"flex"}
                            flexDir={"row"}
                            alignItems={"center"}
                            justifyContent={"space-between"}
                          >
                            <Stack flexDirection={"row"}>
                              <Image
                                alt="profile-pic"
                                width="50"
                                height="50"
                                unoptimized
                                src={"/assets/profile.png"}
                              />
                              <VStack
                                alignItems={"start"}
                                spacing={1}
                                marginLeft={5}
                              >
                                <Text fontWeight={700} fontSize={16}>
                                  John Doe
                                </Text>
                                <Text fontSize={12}>
                                  Commented on Post {moment(d.id).fromNow()}
                                </Text>
                              </VStack>
                            </Stack>
                            {commentLikeList.includes(d.id) ? (
                              <IconButton
                                onClick={() => {
                                  setcommentLikeList((prevElements) =>
                                    prevElements.filter(
                                      (element) => d.id !== element
                                    )
                                  );
                                }}
                                variant="ghost"
                                colorScheme="gray"
                                aria-label="See menu"
                                icon={<BsHeartFill color="red" />}
                              />
                            ) : (
                              <IconButton
                                onClick={() => {
                                  setcommentLikeList((prevElements) => [
                                    ...prevElements,
                                    d.id,
                                  ]);
                                }}
                                variant="ghost"
                                colorScheme="gray"
                                aria-label="See menu"
                                icon={<BsHeart />}
                              />
                            )}
                          </Stack>
                          <Stack marginTop={7} marginLeft={20}>
                            <Text fontWeight={600} fontSize={15}>
                              {`" ${d.message} "`}
                            </Text>
                          </Stack>
                        </Box>
                      ))
                    : null}
                </Box>
              </CardBody>
            </Card>
          ))
        ) : (
          <Box
            height={350}
            display={"flex"}
            justifyContent={"center"}
            alignItems={"center"}
          >
            <Text fontSize={22} fontWeight={500}>
              No Posts yet
            </Text>
          </Box>
        )}
      </div>
    </>
  );
}
